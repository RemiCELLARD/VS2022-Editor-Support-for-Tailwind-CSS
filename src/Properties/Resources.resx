<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Option_Category_Build_Title" xml:space="preserve">
    <value>Build</value>
  </data>
  <data name="Option_Category_Class_Sort_Title" xml:space="preserve">
    <value>Class sort</value>
  </data>
  <data name="Option_Category_Custom_Build_Title" xml:space="preserve">
    <value>Custom build</value>
  </data>
  <data name="Option_Category_General_Title" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Option_Category_Validation_Title" xml:space="preserve">
    <value>Validation</value>
  </data>
  <data name="Option_Description_Automatically_Apply_Lib_Updates" xml:space="preserve">
    <value>True if the Tailwind CSS should update on project load; false if not</value>
  </data>
  <data name="Option_Description_Build_Script" xml:space="preserve">
    <value>The name of the script to execute on build (defined in package.json); leave blank to use the default Tailwind CSS build</value>
  </data>
  <data name="Option_Description_Build_Type" xml:space="preserve">
    <value>Files can be built in four ways: Default (Tailwind JIT), OnSave (on file save), OnBuild (on project build), and None (no building)</value>
  </data>
  <data name="Option_Description_Class_Sort_Type" xml:space="preserve">
    <value>Classes can be sorted manually (with 'Tools' options), on file save (only sorts open file), on build (entire solution), or never.</value>
  </data>
  <data name="Option_Description_CSS_Conflict" xml:space="preserve">
    <value>Class names on the same HTML element / CSS class which apply the same CSS property or properties.</value>
  </data>
  <data name="Option_Description_Default_Output_File_Name" xml:space="preserve">
    <value>Sets the default name of the built Tailwind CSS file; use {0} if you want to reference the content file name</value>
  </data>
  <data name="Option_Description_Enable_Extension" xml:space="preserve">
    <value>Enables or disables the extension features</value>
  </data>
  <data name="Option_Description_Enable_Linter" xml:space="preserve">
    <value>Enables or disables the entire linter.</value>
  </data>
  <data name="Option_Description_Invalid_Config_Path" xml:space="preserve">
    <value>Unknown or invalid path used with the theme helper.</value>
  </data>
  <data name="Option_Description_Invalid_Screen" xml:space="preserve">
    <value>Unknown screen name used with the @screen directive.</value>
  </data>
  <data name="Option_Description_Invalid_Tailwind_Directive" xml:space="preserve">
    <value>Unknown value used with the @tailwind directive.</value>
  </data>
  <data name="Option_Description_Minify_Builds" xml:space="preserve">
    <value>Determines whether or not the Tailwind build process minifies by default</value>
  </data>
  <data name="Option_Description_Override_Build" xml:space="preserve">
    <value>Only runs the script defined in "Build script" when set to true; both run simultaneously when set to false; only the default Tailwind build will run if the package.json script is not found</value>
  </data>
  <data name="Option_Description_Tailwind_CLI_Path" xml:space="preserve">
    <value>The absolute path to the Tailwind CLI executable for building: if empty, the default npx tailwindcss build command will run; if not, the specified Tailwind CLI will be called</value>
  </data>
  <data name="Option_Description_Tailwind_CSS_Completions_Before_All" xml:space="preserve">
    <value>True if Tailwind CSS completions come before all others; false if after</value>
  </data>
  <data name="Option_Name_Automatically_Apply_Lib_Updates" xml:space="preserve">
    <value>Automatically apply library updates</value>
  </data>
  <data name="Option_Name_Build_Script" xml:space="preserve">
    <value>Build script</value>
  </data>
  <data name="Option_Name_Build_Type" xml:space="preserve">
    <value>Build type</value>
  </data>
  <data name="Option_Name_Class_Sort_Type" xml:space="preserve">
    <value>Class sort type</value>
  </data>
  <data name="Option_Name_CSS_Conflict" xml:space="preserve">
    <value>CSS conflict</value>
  </data>
  <data name="Option_Name_Default_Output_File_Name" xml:space="preserve">
    <value>Default output file name</value>
  </data>
  <data name="Option_Name_Enable_Extension" xml:space="preserve">
    <value>Enable extension</value>
  </data>
  <data name="Option_Name_Enable_Linter" xml:space="preserve">
    <value>Enable linter</value>
  </data>
  <data name="Option_Name_Invalid_Config_Path" xml:space="preserve">
    <value>Invalid config path</value>
  </data>
  <data name="Option_Name_Invalid_Screen" xml:space="preserve">
    <value>Invalid screen</value>
  </data>
  <data name="Option_Name_Invalid_Tailwind_Directive" xml:space="preserve">
    <value>Invalid Tailwind directive</value>
  </data>
  <data name="Option_Name_Minify_Builds" xml:space="preserve">
    <value>Minify builds</value>
  </data>
  <data name="Option_Name_Override_Build" xml:space="preserve">
    <value>Override build</value>
  </data>
  <data name="Option_Name_Tailwind_CLI_Path" xml:space="preserve">
    <value>Tailwind CLI path</value>
  </data>
  <data name="Option_Name_Tailwind_CSS_Completions_Before_All" xml:space="preserve">
    <value>Tailwind CSS completions before all</value>
  </data>
</root>