//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TailwindCSSIntellisense.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TailwindCSSIntellisense.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Build.
        /// </summary>
        internal static string Option_Category_Build_Title {
            get {
                return ResourceManager.GetString("Option_Category_Build_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class sort.
        /// </summary>
        internal static string Option_Category_Class_Sort_Title {
            get {
                return ResourceManager.GetString("Option_Category_Class_Sort_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom build.
        /// </summary>
        internal static string Option_Category_Custom_Build_Title {
            get {
                return ResourceManager.GetString("Option_Category_Custom_Build_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string Option_Category_General_Title {
            get {
                return ResourceManager.GetString("Option_Category_General_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation.
        /// </summary>
        internal static string Option_Category_Validation_Title {
            get {
                return ResourceManager.GetString("Option_Category_Validation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to True if the Tailwind CSS should update on project load; false if not.
        /// </summary>
        internal static string Option_Description_Automatically_Apply_Lib_Updates {
            get {
                return ResourceManager.GetString("Option_Description_Automatically_Apply_Lib_Updates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the script to execute on build (defined in package.json); leave blank to use the default Tailwind CSS build.
        /// </summary>
        internal static string Option_Description_Build_Script {
            get {
                return ResourceManager.GetString("Option_Description_Build_Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Files can be built in four ways: Default (Tailwind JIT), OnSave (on file save), OnBuild (on project build), and None (no building).
        /// </summary>
        internal static string Option_Description_Build_Type {
            get {
                return ResourceManager.GetString("Option_Description_Build_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes can be sorted manually (with &apos;Tools&apos; options), on file save (only sorts open file), on build (entire solution), or never..
        /// </summary>
        internal static string Option_Description_Class_Sort_Type {
            get {
                return ResourceManager.GetString("Option_Description_Class_Sort_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class names on the same HTML element / CSS class which apply the same CSS property or properties..
        /// </summary>
        internal static string Option_Description_CSS_Conflict {
            get {
                return ResourceManager.GetString("Option_Description_CSS_Conflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the default name of the built Tailwind CSS file; use {0} if you want to reference the content file name.
        /// </summary>
        internal static string Option_Description_Default_Output_File_Name {
            get {
                return ResourceManager.GetString("Option_Description_Default_Output_File_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the extension features.
        /// </summary>
        internal static string Option_Description_Enable_Extension {
            get {
                return ResourceManager.GetString("Option_Description_Enable_Extension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the entire linter..
        /// </summary>
        internal static string Option_Description_Enable_Linter {
            get {
                return ResourceManager.GetString("Option_Description_Enable_Linter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown or invalid path used with the theme helper..
        /// </summary>
        internal static string Option_Description_Invalid_Config_Path {
            get {
                return ResourceManager.GetString("Option_Description_Invalid_Config_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown screen name used with the @screen directive..
        /// </summary>
        internal static string Option_Description_Invalid_Screen {
            get {
                return ResourceManager.GetString("Option_Description_Invalid_Screen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown value used with the @tailwind directive..
        /// </summary>
        internal static string Option_Description_Invalid_Tailwind_Directive {
            get {
                return ResourceManager.GetString("Option_Description_Invalid_Tailwind_Directive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether or not the Tailwind build process minifies by default.
        /// </summary>
        internal static string Option_Description_Minify_Builds {
            get {
                return ResourceManager.GetString("Option_Description_Minify_Builds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only runs the script defined in &quot;Build script&quot; when set to true; both run simultaneously when set to false; only the default Tailwind build will run if the package.json script is not found.
        /// </summary>
        internal static string Option_Description_Override_Build {
            get {
                return ResourceManager.GetString("Option_Description_Override_Build", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The absolute path to the Tailwind CLI executable for building: if empty, the default npx tailwindcss build command will run; if not, the specified Tailwind CLI will be called.
        /// </summary>
        internal static string Option_Description_Tailwind_CLI_Path {
            get {
                return ResourceManager.GetString("Option_Description_Tailwind_CLI_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to True if Tailwind CSS completions come before all others; false if after.
        /// </summary>
        internal static string Option_Description_Tailwind_CSS_Completions_Before_All {
            get {
                return ResourceManager.GetString("Option_Description_Tailwind_CSS_Completions_Before_All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically apply library updates.
        /// </summary>
        internal static string Option_Name_Automatically_Apply_Lib_Updates {
            get {
                return ResourceManager.GetString("Option_Name_Automatically_Apply_Lib_Updates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Build script.
        /// </summary>
        internal static string Option_Name_Build_Script {
            get {
                return ResourceManager.GetString("Option_Name_Build_Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Build type.
        /// </summary>
        internal static string Option_Name_Build_Type {
            get {
                return ResourceManager.GetString("Option_Name_Build_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class sort type.
        /// </summary>
        internal static string Option_Name_Class_Sort_Type {
            get {
                return ResourceManager.GetString("Option_Name_Class_Sort_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CSS conflict.
        /// </summary>
        internal static string Option_Name_CSS_Conflict {
            get {
                return ResourceManager.GetString("Option_Name_CSS_Conflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default output file name.
        /// </summary>
        internal static string Option_Name_Default_Output_File_Name {
            get {
                return ResourceManager.GetString("Option_Name_Default_Output_File_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable extension.
        /// </summary>
        internal static string Option_Name_Enable_Extension {
            get {
                return ResourceManager.GetString("Option_Name_Enable_Extension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable linter.
        /// </summary>
        internal static string Option_Name_Enable_Linter {
            get {
                return ResourceManager.GetString("Option_Name_Enable_Linter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid config path.
        /// </summary>
        internal static string Option_Name_Invalid_Config_Path {
            get {
                return ResourceManager.GetString("Option_Name_Invalid_Config_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid screen.
        /// </summary>
        internal static string Option_Name_Invalid_Screen {
            get {
                return ResourceManager.GetString("Option_Name_Invalid_Screen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Tailwind directive.
        /// </summary>
        internal static string Option_Name_Invalid_Tailwind_Directive {
            get {
                return ResourceManager.GetString("Option_Name_Invalid_Tailwind_Directive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minify builds.
        /// </summary>
        internal static string Option_Name_Minify_Builds {
            get {
                return ResourceManager.GetString("Option_Name_Minify_Builds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override build.
        /// </summary>
        internal static string Option_Name_Override_Build {
            get {
                return ResourceManager.GetString("Option_Name_Override_Build", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tailwind CLI path.
        /// </summary>
        internal static string Option_Name_Tailwind_CLI_Path {
            get {
                return ResourceManager.GetString("Option_Name_Tailwind_CLI_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tailwind CSS completions before all.
        /// </summary>
        internal static string Option_Name_Tailwind_CSS_Completions_Before_All {
            get {
                return ResourceManager.GetString("Option_Name_Tailwind_CSS_Completions_Before_All", resourceCulture);
            }
        }
    }
}
